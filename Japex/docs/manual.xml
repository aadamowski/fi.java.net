<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1CR2//EN"
                  "http://docbook.org/xml/simple/1.1CR2/sdocbook.dtd">
<article>
    <artheader>
        <title>Japex</title>
        <author>
            <firstname>Santiago</firstname>
            <surname>Pericas-Geertsen</surname>
            <email>Santiago.PericasGeertsen@sun.com</email>
        </author>
    </artheader>
    <sect1>
        <title>Introduction</title>
        <para> Japex is a simple yet powerful tool to write Java-based micro-benchmarks. It is
            similar in spirit to <link linkend="JUnit">[JUnit]</link> in that if factors out most of
            the repetitive programming logic that is necessary to write in micro-benchmarks. This
            logic includes loading and initializing multiple drivers, warming up the VM, timing the
            inner loop, etc.</para>
        <para/>
        <para> The input to Japex is an XML file describing a test suite. The output is a
            timestamped report available in both XML and HTML formats (although generation of the
            latter can be turned off). HTML reports include one or more bar charts generated using
                <link linkend="JFreeChart">[JFreeChart]</link> which graphically display the data
            for ease of comparison. </para>
        <para>In the context of this document, the term <emphasis>throughput</emphasis> is defined
            to be work over time. Japex is designed to estimate an independent throughput for each
            of the tests in the suite. Throughput estimation is done based on some parameters
            defined in the input file. There are basically two ways to specify that: (i) fix the
            amount of work and estimate time or (ii) fix the amount of time and estimate work. In
            addition to each test's individual throughput, aggregate throughtputs in the form of
            arithmetic, geometric and harmonic means are computed for each driver. </para>
        <para>Even though by default Japex will compute a per test and a per driver throughput in
                <emphasis>transactions per second</emphasis> (TPS), it is possible to customize a
            test suite to either calculate throughput using a different unit, such as KBytes/s, or
            produce a different kind of <emphasis>result</emphasis> such as latency, memory usage or
            message size.</para>
    </sect1>
    <sect1>
        <title>Writing Drivers</title>
        <para>A driver encapsulates knowledge about a specific algorithm implementation, and thus a
            different driver is required for each implementation under test. For example, if XML
            parsing is the algorithm under test and parsers X, Y and Z are being evaluated, a
            different driver must be provided for each implementation. </para>
        <para> A driver is a Java class that extends <token>JapexDriverBase</token>, which in turn
            implements the interface <token>JapexDriver</token> shown below. <example>
                <title>JapexDriver Interface</title>
                <programlisting><![CDATA[    public interface JapexDriver extends Runnable {
      
        public void initializeDriver();
      
        public void prepare(TestCase testCase);    
        public void warmup(TestCase testCase);
        public void run(TestCase testCase);
        public void finish(TestCase testCase);
      
        public void terminateDriver();
    } ]]>
        </programlisting>
            </example>
        </para>
        <para> The method <token>initializeDriver()</token> is called when the driver is loaded into
            memory; the method <token>terminateDriver()</token> is called when all the results for
            the driver have been computed. The other methods define the four
            <emphasis>phases</emphasis> carried out by Japex for the generation of the output
            report. </para>
        <para>The <token>prepare()</token> method defines a similarly named phase in which drivers
            set up their initial state. For example, a driver can load its input data into memory to
            avoid I/O during the subsequent two phases.</para>
        <para>The <token>warmup()</token> method is called during the warmup phase in which the
            inner loop of the computation is carried out a number of times in order to warm up the
            VM. The duration of this phase is regulated by the global parameters
            'japex.warmupIterations' and 'japex.warmupTime' (the latter taking precedence over the
            former if both are specified). </para>
        <para>The <token>run()</token> method is intended to execute the inner loop under test. For
            some drivers, this method will be identical to <token>warmup()</token>, but there are
            cases in which additional steps may be necessary during the run phase. The other
            difference is that the <token>run()</token> method will be executed concurrently
            whenever the value of the global param 'japex.numberOfThreads' is greater than one. In
            fact, the <token>run()</token> method is the only method executed concurrently, all the
            others will be called from Japex' main thread.</para>
        <para>Finally, the <token>finish()</token> method defines the last execution phase. Japex
            will set the value of the test case parameter 'japex.actualRunTime' after the run phase
            is completed but before the finish phase is started. Therefore, the
            <token>finish()</token> method can be used to override the default behavior which is to
            compute a per test throughput in TPS, where a transaction is defined to be a single call
            to <token>run()</token>. Whatever result is computed in this method must be of numeric
            type and must be used to set the output parameter 'japex.resultValue'. If the default
            result unit of TPS does not apply, the driver should also set the value of
            'japex.resultUnit' (since this unit is the same for all drivers, this parameter can also
            be set globally in Japex' input file).</para>
    </sect1>
    <sect1>
        <title>Test Suites</title>
        <para>Test suites are described using a single configuration file written in XML. This file
            includes information such as runtime class path, drivers and test cases. A driver
            encapsulates knowledge about a specific algorithm implementation, and thus a different
            driver is required for each implementation under test. For example, if XML parsing is
            the algorithm under test and parsers X, Y and Z are being evaluated, a different driver
            must be provided for each implementation.</para>
        <para> A sample configuration file is shown below: <example>
                <title>Sample Configuration File</title>
                <programlisting><![CDATA[    <testSuite name="ParsingPerformance" xmlns="http://www.sun.com/japex/testSuite">
        <param name="libraryDir" value="lib"/>
        <param name="japex.classPath" value="${libraryDir}/../dist/classes"/>
                
        <param name="japex.warmupIterations" value="100"/>
        <param name="japex.runIterations" value="200"/>
                
        <driver name="XDriver">
            <param name="Description" value="Driver for X parser"/>
            <param name="japex.DriverClass" value="com.foo.XDriver"/>
        </driver>
        <driver name="YDriver">
            <param name="Description" value="Driver for Y parser"/>
            <param name="japex.driverClass" value="com.foo.YDriver"/>
        </driver>
        <driver name="ZDriver">
            <param name="Description" value="Driver for Z parser"/>
            <param name="japex.driverClass" value="com.foo.ZDriver"/>
        </driver>
                
        <testCase name="file1.xml">
            <param name="xmlfile" value="data/file1.xml"/>
        </testCase>
        <testCase name="file2.xml">
             <param name="xmlfile" value="data/file2.xml"/>
        </testCase>
    </testSuite>]]></programlisting>
            </example>
        </para>
        <para> A test suite's configuration file is defined as a sequence of zero or more global
            parameters followed by a sequence of one or more drivers and then followed by a sequence
            of one or more test cases. Correspondingly, there are three kinds of parameters: global,
            driver and test case paremeters. Parameters whose names start with the string "japex."
            are reserved and assigned specific meanings by Japex. For example, setting
            "japex.runIterations" to "200" will result in all test cases of the test suite to be
            executed 200 times. A list of reserved global parameters is included in Section <link linkend="Reference">[Reference]</link>.</para>
    </sect1>
    <sect1>
        <title>Normalizing Results</title>
        <para>It is often convenient to normalize all the results based on those for a specific
            driver. This is especially useful in those cases where the difference between the
            results is so large that it becomes difficult to read them from a bar chart.</para>
        <para>Defining which driver will be used as the <emphasis>normalizer</emphasis> is as simple
            as setting the <token>normal</token> attribute on the <token>driver</token> element as
            shown below: <example>
                <title>Setting the <token>normal</token> Attribute</title>
                <programlisting><![CDATA[    <testSuite name="ParsingPerformance" xmlns="http://www.sun.com/japex/testSuite">
        <param name="libraryDir" value="lib"/>                   
        ...
        <driver name="XDriver" normal="true">   <!-- Normalize results using this driver -->
            <param name="Description" value="Driver for X parser"/>
            <param name="japex.DriverClass" value="com.foo.XDriver"/>
        </driver>                    
        ...            
    </testSuite>]]></programlisting>
            </example>
        </para>
        <para>Note that the normalization of results only applies to the bar charts generated by
            Japex: the absolute values of the results are still included in the XML report and,
            consequently, in HTML report tables. The default value for <token>normal</token>
            is <token>false</token>. If more than one driver is defined as the normalizer, all but
            the first (in document order) are ignored.</para>
    </sect1>
    <sect1>
        <title> Customizing Japex </title>
        <para>
            <emphasis>(Under development - See XMLSizeDriver.java and FastInfosetSizeDriver.java
            in the samples directory)</emphasis>
        </para>
    </sect1>
    <sect1 id="Reference">
        <title>Reference</title>
        <para> Input parameters are those specified in the configuration file that defines the test
            suite. Output parameters are those that are either computed by Japex or by any of
            drivers during the execution of the test.</para>
        <sect2>
            <title>Global Parameter Reference</title>
            <itemizedlist>
                <listitem>
                    <para> japex.numberOfThreads: Number of threads to use during the run phase of
                        the test. Note that this is the number of threads that will be created prior
                        to the execution of each test. If iterations (i.e., work) is specified
                        instead of time as the means to compute throughput, each thread will carry
                        out floor(iterations / japex.numberOfThreads). This adjustment is necesssary
                        to make the output of a single-threaded run be comparable to that of
                        multi-threaded run. DEFAULT: 1, TYPE: input. </para>
                </listitem>
                <listitem>
                    <para> japex.warmupIterations: Number of iterations used to warm up the VM prior
                        to executing each test. DEFAULT: 300, TYPE: input. </para>
                </listitem>
                <listitem>
                    <para> japex.runIterations: Number of iterations used to execute each test.
                        DEFAULT: 300, TYPE: input. </para>
                </listitem>
                <listitem>
                    <para> japex.warmupTime: Number of hours, minutes and seconds to warm up the VM
                        prior to executing each test. Specified as a string in the format
                        "((HH:)?MM:)?S?S". Takes precedence over japex.warumpIterations if both are
                        specified. UNIT: second, DEFAULT: undefined, TYPE: input.</para>
                </listitem>
                <listitem>
                    <para> japex.runTime: Number of hours, minutes and seconds to execute each test
                        to warm up the VM prior to executing the test. Specified as a string in the
                        format "((HH:)?MM:)S?S". Takes precedence over japex.runIterations if both
                        are specified. UNIT: second, DEFAULT: undefined, TYPE: input.</para>
                </listitem>
                <listitem>
                    <para> japex.classPath: Runtime class path needed to load drivers and related
                        libraries. Can be defined multiple times, with each new definition taken as
                        an addition to the runtime class path. Thus, only a single class path entry
                        is allowed per definition (i.e., path separators are not allowed). DEFAULT:
                        empty, TYPE: input.</para>
                </listitem>
                <listitem>
                    <para> japex.resultUnit: The result's unit used in this test. May be set in the
                        configuration file or programmatically. DEFAULT: "TPS", TYPE: input/output.</para>
                </listitem>
                <listitem>
                    <para> japex.version: Version of Japex used in the run. TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.osName: Name of the operating system. TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.osArchitecture: Name of the operating system architecture. TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.vmInfo: Virtual machine information. TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.dateTime: Timestamp of the run. This value is also used to create a
                        unique directory in which the reports are stored. TYPE: output.</para>
                </listitem>
            </itemizedlist>
        </sect2>
        <sect2>
            <title>Driver Parameter Reference</title>
            <itemizedlist>
                <listitem>
                    <para> japex.driverClass: Name of Java class that implements a driver. If
                        absent, the driver's name is used instead. DEFAULT: undefined, TYPE: input. </para>
                </listitem>
                <listitem>
                    <para> japex.resultAritMean: Arithmetic mean (average) for all test case results
                        estimated for this driver. TYPE: output. </para>
                </listitem>
                <listitem>
                    <para> japex.resultGeomMean: Geometric mean of all test case results estimated
                        for this driver. TYPE: output. </para>
                </listitem>
                <listitem>
                    <para> japex.resultHarmMean: Harmonic mean of all test case results estimated
                        for this driver. TYPE: output. </para>
                </listitem>
            </itemizedlist>
        </sect2>
        <sect2>
            <title>Test Case Parameter Reference</title>
            <para> The parameters 'japex.warmupIterations', 'japex.runIterations',
                'japex.warmupTime' and 'japex.runTime' are pre-defined for each test and initialized
                using the global environment. It is also possible to indepently re-define these
                parameters for each test. </para>
            <itemizedlist>
                <listitem>
                    <para> japex.resultValue: The value of the output result for this test. If unset
                        by a driver, it will be automatically computed by Japex dividing
                        'japex.actualRunIterations' by 'japex.actualRunTime'. UNIT:
                        'japex.resultUnit', TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.actualPrepareTime: Actual number of milliseconds spent during the
                        prepare phase for this test. UNIT: millisecond, TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.actualWarmupTime: Actual number of milliseconds spent during the
                        warmup phase for this test. Always greater or equal to japex.warmupTime
                        times 1000, if specified. UNIT: millisecond, TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.actualRunTime: Actual number of milliseconds spent during the run
                        phase for this test. Always greater or equal to japex.runTime times 1000, if
                        specified.. UNIT: millisecond, TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.actualWarmupIterations: Actual number of iterations carried out
                        during the warmup phase for this test. If 'japex.numberOfThreads' is greater
                        than one, the value of this output paramter may be less than
                        'japex.warmupIterations'. UNIT: iteration, TYPE: output.</para>
                </listitem>
                <listitem>
                    <para> japex.actualRunIterations: Actual number of iterations carried out during
                        the run phase for this test. If 'japex.numberOfThreads' is greater than one,
                        the value of this output paramter may be less than 'japex.runIterations'.
                        UNIT: iteration, TYPE: output.</para>
                </listitem>
            </itemizedlist>
        </sect2>
    </sect1>
    <!-- Explain the different types of means computed by Japex -->
    <sect1>
        <title>References</title>
        <orderedlist>
            <listitem id="JUnit">
                <para>
                    <ulink url="http://junit.sourceforge.net">JUnit</ulink>
                </para>
            </listitem>
            <listitem id="JFreeChart">
                <para>
                    <ulink url="http://www.jfree.org/jfreechart/index.html">JFreeChart</ulink>
                </para>
            </listitem>
        </orderedlist>
    </sect1>
</article>
